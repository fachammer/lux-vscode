name: Lux
scopeName: source.lux
patterns:
- include: '#comments'
- include: '#string'
- include: '#constants'
- include: '#s-expression'
- include: '#tuple'
- include: '#record'

repository:
  comments:
    patterns:
    - name: comment.line.double-hash.lux
      begin: (##)
      end: ($)
    - name: comment.block.lux
      begin: (#\()
      end: (\))
      patterns:
      - include: $self
  constants:
    patterns:
    - name: constant.language.bool.lux
      match: (true|false)
    - name: constant.numeric.int.lux
      match: ((-|\+)?[0-9][0-9,]*)
      # using constant.keyword.clojure instead of constant.tag.lux to
      # leverage existing language syntax themes for clojure
    - name: constant.keyword.clojure
      match: (#[^\s\]\)\}]+(?=[\s\]\)\}]))
  s-expression:
    name: meta.expression.lux
    begin: (\()
    beginCaptures:
      '1':
        name: punctuation.section.expression.begin.lux
    end: (\))
    endCaptures:
      '1':
        name: punctuation.section.expression.end.trailing.lux
    patterns:
    - begin: (?<=\()\s*
      end: (?=[\s\)])
      patterns:
      - include: '$self'
      - name: keyword.control.lux
        match: (([^0-9\s][^\s\)]*)?:[^\s\)]*)
      - name: entity.name.function.lux
        match: ([^0-9\s][^\s\)]*)
    - include: '$self'
  string:
    name: string.quoted.double.lux
    begin: (")
    end: (")
    patterns:
    - name: constant.character.escape.lux
      match: (\\.)
  tuple:
    name: meta.tuple.lux
    begin: (\[)
    beginCaptures:
      '1':
        name: punctuation.section.tuple.begin.lux
    end: (\])
    endCaptures:
      '1':
        name: punctuation.section.tuple.end.lux
    patterns:
    - include: $self
  record:
    name: meta.record.lux
    begin: (\{)
    beginCaptures:
      '1':
        name: punctuation.section.record.begin.lux
    end: (\})
    endCaptures:
      '1':
        name: punctuation.section.record.end.lux
    patterns:
    - include: $self
