name: Lux
scopeName: source.lux
patterns:
- include: '#comments'
- include: '#strings'
- include: '#bools'
- include: '#reals'
- include: '#ints'
- include: '#tags'
- include: '#symbols'
- include: '#s-expressions'
- include: '#tuples'
- include: '#records'

repository:
  comments:
    patterns:
    - name: comment.line.double-hash.lux
      begin: (##)
      end: ($)
    - name: comment.block.lux
      begin: (#\()
      end: (\))
      patterns:
      - include: '#comments'
  bools:
    patterns:
    - name: constant.language.bool.lux
      match: (true|false)
  reals:
    patterns:
    - name: constant.numeric.real.lux
      match: ([\+\-]?([0-9]*\.[0-9]+(e[\+\-]?[0-9]+)?|[0-9]+(e[\+\-]?[0-9]+)))(?=[$\s\)\]\}])
  ints:
    patterns:
    - name: constant.numeric.int.hex.lux
      match: ([\+\-]?0x[0-9A-Fa-f]+)(?=[$\s\)\]\}])
    - name: constant.numeric.int.binary.lux
      match: ([\+\-]?0b[0-1]+)(?=[$\s\)\]\}])
    - name: constant.numeric.int.decimal.lux
      match: ([\+\-]?[0-9]+)(?=[\s\)\]\}])
    - name: invalid.illegal.numeric.lux
      match: ([\+\-]?\.?[0-9].*)(?=[\s\)\]\}])
  tags:
    patterns:
      # using constant.keyword.clojure instead of constant.tag.lux to
      # leverage existing color themes for clojure
    - name: constant.keyword.clojure
      match: (#[^\[\{\(\]\}\)\s]+(?=[\s\]\}\)]))
    - name: invalid.illegal.tag.lux
      match: (#.*)
  symbols:
    patterns:
      # using meta.symbol.clojure instead of meta.symbol.lux to
      # leverage exting color themes for clojure 
    - name: meta.symbol.clojure
      match: (?<!\()([^0-9#\(\)\[\]\{\}\s][^#\(\)\[\]\{\}\s]*(?=[\)\]\}\s]))
    - name: invalid.illegal.symbol.lux
      match:  (?<!\()([^0-9#\(\)\[\]\{\}\s][^\s]*(?=[\)\]\}\s]))
  s-expressions:
    name: meta.expression.lux
    begin: (\()
    beginCaptures:
      '1':
        name: punctuation.section.expression.begin.lux
    end: (\))
    endCaptures:
      '1':
        name: punctuation.section.expression.end.trailing.lux
    patterns:
    - begin: (?<=\()\s*
      end: (?=[\s\)])
      patterns:
      - include: '$self'
      - name: keyword.control.lux
        match: (([^0-9\s][^\s\)]*)?:[^\s\)]*)
      - name: entity.name.function.lux
        match: ([^0-9\s][^\s\)]*)
    - include: '$self'
  strings:
    name: string.quoted.double.lux
    begin: (")
    end: (")
    patterns:
    - name: constant.character.escape.lux
      match: (\\.)
  tuples:
    name: meta.tuple.lux
    begin: (\[)
    beginCaptures:
      '1':
        name: punctuation.section.tuple.begin.lux
    end: (\])
    endCaptures:
      '1':
        name: punctuation.section.tuple.end.lux
    patterns:
    - include: $self
  records:
    name: meta.record.lux
    begin: (\{)
    beginCaptures:
      '1':
        name: punctuation.section.record.begin.lux
    end: (\})
    endCaptures:
      '1':
        name: punctuation.section.record.end.lux
    patterns:
    - include: $self
